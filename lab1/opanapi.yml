openapi: 3.0.0

info:
  title: "СОА спецификация OpenAPI"
  description: |
    Navigator и Routes сервисы

    Беляев Михаил P3412 и Дениченко Александр P3412

    Вариант 8801
  version: "1.0.0"

servers:
  - url: http://localhost:8080/api/v1

tags:
  - name: "Routes"
  - name: "Navigator"

paths:
  /routes:
    get:
      tags:
        - "Routes"
      summary: "Получить все маршруты с фильтрацией, сортировкой и пагинацией"
      description: Возвращает массив всех объектов Route. 
      parameters:
        - name: sort
          in: query
          description: "Поля для сортировки. Формат: `fieldName_asc` или `fieldName_desc`. Несколько полей через запятую."
          required: false
          schema:
            type: string
            example: "name_asc,distance_desc"
        - name: filter
          in: query
          description: "Параметры для фильтрации."
          required: false
          style: form
          explode: true
          schema:
            type: object
            properties:
              name: 
                type: string
                description: "Фильтрация по названию"
              
              distance:
                type: integer
                description: "Фильтрация по дистанции"
              
              "coordinates.x":
                type: number
                format: double
                description: "Фильтрация по координате X"
              "coordinates.y":
                type: integer
                description: "Фильтрация по координате Y"
              
              "from.x":
                type: number
                format: double
                description: "Фильтрация по координате X начальной точки"
              "from.y":
                type: number
                format: double
                description: "Фильтрация по координате Y начальной точки"
              "from.name":
                type: string
                description: "Фильтрация по названию начальной точки"
              
              "to.x":
                type: number
                format: double
                description: "Фильтрация по координате X конечной точки"
              "to.y":
                type: number
                format: double
                description: "Фильтрация по координате Y конечной точки"
              "to.name":
                type: string
                description: "Фильтрация по названию конечной точки"
              
              creationDate:
                type: string
                format: date-time
                description: "Фильтрация по дате создания"
        - name: page
          in: query
          description: "Пагинация по номеру страницы (начиная с 1)"
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: "Количество элементов на странице"
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: "Успешный ответ с массивом маршрутов"
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
    post:
      tags:
        - "Routes"
      summary: "Добавить новый маршрут"
      description: "Создает новый объект Route на основе переданных данных в теле запроса."
      requestBody:
        description: "Объект Route для добавления."
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/RouteInput'
      responses:
        '201':
          description: "Маршрут успешно создан."
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          description: "Некорректные данные."
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'

  /routes/{id}:
    parameters:
      - name: id
        in: path
        description: "Идентификатор маршрута"
        required: true
        schema:
          type: integer
          minimum: 1
    get:
      tags:
        - "Routes"
      summary: "Получить маршрут по ID"
      responses:
        '200':
          description: "Успешный ответ с объектом Route"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: "Маршрут с указанным ID не найден"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - "Routes"
      summary: "Обновить существующий маршрут по ID"
      requestBody:
        description: "Обновленные данные для маршрута."
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/RouteInput'
      responses:
        '200':
          description: "Маршрут успешно обновлен"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          description: "Некорректные данные"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: "Маршрут не найден"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - "Routes"
      summary: "Удалить маршрут по ID"
      responses:
        '204':
          description: "Маршрут успешно удален"
        '404':
          description: "Маршрут не найден"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'

  /routes/max-by-from:
    get:
      tags:
        - "Routes"
      summary: "Получить один маршрут с максимальным значением поля 'from'"
      description: "Возвращает один (любой) объект, значение поля `from` которого является максимальным."
      responses:
        '200':
          description: "Успешный ответ с объектом Route"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: "В коллекции нет ни одного маршрута"
  
  /routes/name-starts-with/{substring}:
    get:
      tags:
        - "Routes"
      summary: "Найти маршруты, имя которых начинается с подстроки"
      parameters:
        - name: substring
          in: path
          description: "Подстрока для поиска в начале поля `name`"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Массив найденных маршрутов"
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
        '400':
          description: "Некорректные данные"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'

  /routes/distances/unique:
    get:
      tags:
        - "Routes"
      summary: "Получить массив уникальных значений поля distance"
      responses:
        '200':
          description: "Массив уникальных дистанций"
          content:
            application/xml:
              schema:
                type: array
                items:
                  type: integer
                  description: "Уникальное значение дистанции"

  /navigator/route/{id-from}/{id-to}/{shortest}:
    get:
      tags:
        - "Navigator"
      summary: "Найти самый короткий или длинный маршрут между локациями"
      description: "Находит маршрут между двумя точками, представленными ID существующих маршрутов (`id-from`, `id-to`). Параметр `shortest` определяет, искать самый короткий (true) или самый длинный (false) путь."
      parameters:
        - name: id-from
          in: path
          required: true
          schema:
            type: integer
        - name: id-to
          in: path
          required: true
          schema:
            type: integer
        - name: shortest
          in: path
          description: "'true' для поиска самого короткого, 'false' - для самого длинного"
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: "Найденный оптимальный маршрут"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: "Один из указанных ID не найден"
        '400':
          description: "Некорректные данные"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'

  /navigator/route/add/{id-from}/{id-to}/{distance}:
    post:
      tags:
        - "Navigator"
      summary: "Добавить новый маршрут между локациями по их ID"
      description: "Создает новый маршрут между двумя существующими точками (`from` и `to` берутся из маршрутов с `id-from` и `id-to`) с указанной дистанцией."
      parameters:
        - name: id-from
          in: path
          required: true
          schema:
            type: integer
        - name: id-to
          in: path
          required: true
          schema:
            type: integer
        - name: distance
          in: path
          required: true
          schema:
            type: integer
            minimum: 2
      responses:
        '201':
          description: "Новый маршрут успешно создан"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: "Один из указанных ID не найден"
        '400':
          description: "Некорректные данные"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'


components:
  schemas:
    Route:
      type: object
      description: "Описывает маршрут с начальной и конечной точками"
      xml:
        name: "Route"
      properties:
        id:
          type: integer
          description: "Уникальный идентификатор"
          readOnly: true
          minimum: 1
        name:
          type: string
          description: "Название маршрута"
          minLength: 1
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        creationDate:
          type: string
          format: date-time
          description: "Дата создания"
          readOnly: true
        from:
          $ref: '#/components/schemas/Location'
        to:
          $ref: '#/components/schemas/Location'
        distance:
          type: integer
          description: "Длина маршрута. Должна быть больше 1."
          minimum: 2
          nullable: true
      required:
        - name
        - coordinates
        - from
        - to

    RouteInput:
      type: object
      description: "Модель для создания/обновления Route (без генерируемых полей)"
      xml:
        name: "Route"
      properties:
        name:
          type: string
          description: "Название маршрута"
          minLength: 1
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        from:
          $ref: '#/components/schemas/Location'
        to:
          $ref: '#/components/schemas/Location'
        distance:
          type: integer
          description: "Длина маршрута. Должна быть больше 1."
          minimum: 2
          nullable: true
      required:
        - name
        - coordinates
        - from
        - to

    Coordinates:
      type: object
      description: "Координаты"
      xml:
        name: "Coordinates"
      properties:
        x:
          type: number
          format: double
          maximum: 716
        y:
          type: integer
      required:
        - y

    Location:
      type: object
      description: "Местоположение с координатами и названием"
      xml:
        name: "Location"
      properties:
        x:
          type: number
          format: double
          description: "X координата. Не может быть null."
        y:
          type: number
          format: double
          description: "Y координата."
        name:
          type: string
          minLength: 1
          description: "Название локации. Не может быть пустым или null."
      required:
        - x
        - name
    
    Error:
      type: object
      description: "Ошибка"
      xml:
        name: "Error"
      properties:
        message:
          type: string
