openapi: '3.0.0'
info:
  title: "СОА спецификация OpenAPI"
  description: Routes сервис для работы с маршрутами (REST API)
    Беляев Михаил и Дениченко Александр
    Группа P3412
    Вариант 8801
  version: 1.0.0
servers:
  - url: http://localhost:8888/api/v1


tags:
  - name: "Routes"

paths:
  /routes:
    get:
      tags:
          - "Routes"
      summary: "Получить все маршруты с фильтрацией, сортировкой и пагинацией"
      operationId: "getRoutes"
      parameters:
        - name: sort
          in: query
          description: "Поля для сортировки. Формат: `fieldName_asc` или `fieldName_desc`. Несколько полей через запятую."
          required: false
          schema:
            type: string
            example: "name_asc,distance_desc"
        - name: filter
          in: query
          description: "Параметры для фильтрации."
          required: false
          style: form
          explode: true
          schema:
            type: object
            properties:
              name: 
                type: string
                description: "Фильтрация по названию"
                example: "Москва"
              distance:
                type: integer
                format: int64
                description: "Фильтрация по дистанции"
                example: 100
              "coordinates.x":
                type: number
                format: double
                description: "Фильтрация по координате X"
                example: 100.0
              "coordinates.y":
                type: integer
                format: int64
                description: "Фильтрация по координате Y"
                example: 100
              "from.x":
                type: number
                format: double
                description: "Фильтрация по координате X начальной точки"
                example: 100.0
              "from.y":
                type: number
                format: double
                description: "Фильтрация по координате Y начальной точки"
                example: 100.0
              "from.name":
                type: string
                description: "Фильтрация по названию начальной точки"
                example: "Москва"
              "to.x":
                type: number
                format: double
                description: "Фильтрация по координате X конечной точки"
                example: 100.0
              "to.y":
                type: number
                format: double
                description: "Фильтрация по координате Y конечной точки"
                example: 100.0
              "to.name":
                type: string
                description: "Фильтрация по названию конечной точки"
                example: "Москва"
              creationDate:
                type: string
                format: date-time
                description: "Фильтрация по дате создания"
        - name: page
          in: query
          description: "Пагинация по номеру страницы (начиная с 1)"
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: "Количество элементов на странице"
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 50
            default: 10
      responses:
          '200':
            description: "Успешный ответ с массивом маршрутов"
            content:
              application/xml:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Route'
          '400':
            description: "Некорректные данные"
            content:
              application/xml:
                schema:
                  type: object
                  properties:
                    status:
                      type: integer
                      format: int64
                      example: 400
                    message:
                      type: string
                      example: "Некорректные данные"
          '500':
            description: "Внутренняя ошибка сервера"
            content:
              application/xml:
                schema:
                  type: object
                  properties:
                    status:
                      type: integer
                      format: int64
                      example: 500
                    message:
                      type: string
                      example: "Внутренняя ошибка сервера."
          default:
            description: "Default error response"
            content:
              application/xml:
                schema:
                  $ref: '#/components/schemas/Error'
    post:
      tags:
        - "Routes"
      summary: "Добавить новый маршрут"
      description: "Создает новый объект Route на основе переданных данных в теле запроса."
      operationId: "createRoute"
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/RouteInput'
      responses:
        '201':
          description: "Маршрут успешно создан."
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          description: "Некорректные данные."
          content:
            application/xml:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int64
                    example: 400
                  message:
                    type: string
                    example: "Некорректные данные."
        '500':
          description: "Внутренняя ошибка сервера"
          content:
            application/xml:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int64
                    example: 500
                  message:
                    type: string
                    example: "Внутренняя ошибка сервера."
        default:
          description: "Default error response"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
    
  /routes/{id}:
    get:
      tags:
        - "Routes"
      summary: "Получить маршрут по ID"
      description: "Возвращает объект Route по указанному ID."
      operationId: "getRouteById"
      parameters:
        - name: id
          in: path
          description: "Идентификатор маршрута"
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
            exclusiveMinimum: true
            example: 1
            nullable: false
      responses:
        '200':
          description: "Успешный ответ с объектом Route"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: "Маршрут с указанным ID не найден"
          content:
            application/xml:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int64
                    example: 404
                  message:
                    type: string
                    example: "Маршрут с указанным ID не найден."
        '500':
          description: "Внутренняя ошибка сервера"
          content:
            application/xml:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int64
                    example: 500
                  message:
                    type: string
                    example: "Внутренняя ошибка сервера."
        default:
          description: "Default error response"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - "Routes"
      summary: "Обновить существующий маршрут"
      description: "Обновляет объект Route."
      operationId: "updateRoute"
      requestBody:
        description: "Обновленные данные для маршрута."
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/RouteInput'
      parameters:
        - name: id
          in: path
          description: "Идентификатор маршрута"
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
            exclusiveMinimum: true
            example: 1
            nullable: false
      responses:
        '200':
          description: "Успешный ответ с объектом Route"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          description: "Валидация не пройдена"
          content:
            application/xml:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int64
                    example: 405
                  message:
                    type: string
                    example: "Валидация не пройдена."
        '404':
          description: "Маршрут с указанным ID не найден"
          content:
            application/xml:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int64
                    example: 404
                  message:
                    type: string
                    example: "Маршрут с указанным ID не найден."
        '500':
          description: "Внутренняя ошибка сервера"
          content:
            application/xml:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int64
                    example: 500
                  message:
                    type: string
                    example: "Внутренняя ошибка сервера."
        default:
          description: "Default error response"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - "Routes"
      summary: "Удалить маршрут"
      description: "Удаляет объект Route."
      operationId: "deleteRoute"
      parameters:
        - name: id
          in: path
          description: "Идентификатор маршрута"
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
            exclusiveMinimum: true
            example: 1
            nullable: false
      responses:
        '204':
          description: "Маршрут успешно удален"
        '404':
          description: "Маршрут не найден"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'

  /routes/max-by-from:
    get:
      tags:
        - "Routes"
      summary: "Получить один маршрут с максимальным значением поля 'from'"
      description: "Возвращает один (любой) объект, значение поля `from` которого является максимальным."
      responses:
        '200':
          description: "Успешный ответ с объектом Route"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: "В коллекции нет ни одного маршрута"
  
  /routes/name-starts-with/{substring}:
    get:
      tags:
        - "Routes"
      summary: "Найти маршруты, имя которых начинается с подстроки"
      parameters:
        - name: substring
          in: path
          description: "Подстрока для поиска в начале поля `name`"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Массив найденных маршрутов"
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
        '400':
          description: "Некорректные данные"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'

  /routes/distances/unique:
    get:
      tags:
        - "Routes"
      summary: "Получить массив уникальных значений поля distance"
      responses:
        '200':
          description: "Массив уникальных дистанций"
          content:
            application/xml:
              schema:
                type: array
                items:
                  type: integer
                  format: int64
                  description: "Уникальное значение дистанции"

 
components:
  schemas:
    
    Coordinates:
      type: object
      description: "Координаты"
      xml:
        name: "Coordinates"
      properties:
        x:
          type: number
          format: double
          maximum: 716
          description: "X координата. Максимальное значение поля: 716"
          example: 100.0
        y:
          type: integer
          format: int64
          description: "Y координата. Поле не может быть null"
          example: 100
      required:
        - y

    Location:
      type: object
      description: "Местоположение с координатами и его названием"
      xml:
        name: "Location"
      properties:
        x:
          type: number
          format: double
          description: "X координата. Не может быть null."
          example: 100.0
        y:
          type: number
          format: double
          description: "Y координата."
          example: 100.0
        name:
          type: string
          minLength: 1
          description: "Название локации. Не может быть пустой, не может быть null."
          example: "Москва"
      required:
        - x
        - name

    RouteInput:
      type: object
      description: "Описывает маршрут с начальной и конечной точками."
      xml:
        name: "Route"
      properties:
        name:
          type: string
          description: "Название маршрута"
          minLength: 1
          example: "Москва"
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        creationDate:
          type: string
          format: date-time
          description: "Дата создания со временем (автоматически генерируется)."
          example: "2025-01-01T00:00:00Z"
        from:
          $ref: '#/components/schemas/Location'
        to:
          $ref: '#/components/schemas/Location'
        distance:
          type: integer
          format: int64
          description: "Длина маршрута. Должна быть больше 1."
          minimum: 1
          exclusiveMinimum: true
          nullable: true
          example: 100
      required:
        - name
        - coordinates
        - from
        - to

    Route:
      allOf:
        - type: object
          xml:
            name: "Route"
          properties:
            id:
              type: integer
              format: int64
              description: "Уникальный идентификатор (автоматически генерируется). Значение поля должно быть больше 0."
              readOnly: true
              minimum: 0
              exclusiveMinimum: true
              example: 1
        - $ref: '#/components/schemas/RouteInput'

    Error:
      type: object
      description: "Ошибка"
      xml:
        name: "Error"
      properties:
        status:
          type: integer
          format: int64
          description: "Статус ошибки"
        message:
          type: string
          description: "Сообщение об ошибке"
      required:
        - status
        - message